// Generated by view binder compiler. Do not edit!
package com.expensemanager.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.expensemanager.app.R;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.switchmaterial.SwitchMaterial;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentExportDataBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final MaterialCardView cardExportCsv;

  @NonNull
  public final MaterialCardView cardExportJson;

  @NonNull
  public final MaterialCardView cardExportPdf;

  @NonNull
  public final LinearLayout layoutCategories;

  @NonNull
  public final LinearLayout layoutCloudBackup;

  @NonNull
  public final LinearLayout layoutDateRange;

  @NonNull
  public final SwitchMaterial switchAutoBackup;

  @NonNull
  public final TextView tvDateRange;

  @NonNull
  public final TextView tvSelectedCategories;

  private FragmentExportDataBinding(@NonNull ScrollView rootView,
      @NonNull MaterialCardView cardExportCsv, @NonNull MaterialCardView cardExportJson,
      @NonNull MaterialCardView cardExportPdf, @NonNull LinearLayout layoutCategories,
      @NonNull LinearLayout layoutCloudBackup, @NonNull LinearLayout layoutDateRange,
      @NonNull SwitchMaterial switchAutoBackup, @NonNull TextView tvDateRange,
      @NonNull TextView tvSelectedCategories) {
    this.rootView = rootView;
    this.cardExportCsv = cardExportCsv;
    this.cardExportJson = cardExportJson;
    this.cardExportPdf = cardExportPdf;
    this.layoutCategories = layoutCategories;
    this.layoutCloudBackup = layoutCloudBackup;
    this.layoutDateRange = layoutDateRange;
    this.switchAutoBackup = switchAutoBackup;
    this.tvDateRange = tvDateRange;
    this.tvSelectedCategories = tvSelectedCategories;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentExportDataBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentExportDataBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_export_data, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentExportDataBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.card_export_csv;
      MaterialCardView cardExportCsv = ViewBindings.findChildViewById(rootView, id);
      if (cardExportCsv == null) {
        break missingId;
      }

      id = R.id.card_export_json;
      MaterialCardView cardExportJson = ViewBindings.findChildViewById(rootView, id);
      if (cardExportJson == null) {
        break missingId;
      }

      id = R.id.card_export_pdf;
      MaterialCardView cardExportPdf = ViewBindings.findChildViewById(rootView, id);
      if (cardExportPdf == null) {
        break missingId;
      }

      id = R.id.layout_categories;
      LinearLayout layoutCategories = ViewBindings.findChildViewById(rootView, id);
      if (layoutCategories == null) {
        break missingId;
      }

      id = R.id.layout_cloud_backup;
      LinearLayout layoutCloudBackup = ViewBindings.findChildViewById(rootView, id);
      if (layoutCloudBackup == null) {
        break missingId;
      }

      id = R.id.layout_date_range;
      LinearLayout layoutDateRange = ViewBindings.findChildViewById(rootView, id);
      if (layoutDateRange == null) {
        break missingId;
      }

      id = R.id.switch_auto_backup;
      SwitchMaterial switchAutoBackup = ViewBindings.findChildViewById(rootView, id);
      if (switchAutoBackup == null) {
        break missingId;
      }

      id = R.id.tv_date_range;
      TextView tvDateRange = ViewBindings.findChildViewById(rootView, id);
      if (tvDateRange == null) {
        break missingId;
      }

      id = R.id.tv_selected_categories;
      TextView tvSelectedCategories = ViewBindings.findChildViewById(rootView, id);
      if (tvSelectedCategories == null) {
        break missingId;
      }

      return new FragmentExportDataBinding((ScrollView) rootView, cardExportCsv, cardExportJson,
          cardExportPdf, layoutCategories, layoutCloudBackup, layoutDateRange, switchAutoBackup,
          tvDateRange, tvSelectedCategories);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
