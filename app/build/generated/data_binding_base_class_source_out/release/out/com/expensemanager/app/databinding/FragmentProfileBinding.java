// Generated by view binder compiler. Do not edit!
package com.expensemanager.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.expensemanager.app.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentProfileBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final MaterialButton btnBackupData;

  @NonNull
  public final MaterialButton btnEditProfile;

  @NonNull
  public final MaterialButton btnLogout;

  @NonNull
  public final LinearLayout layoutAbout;

  @NonNull
  public final LinearLayout layoutExport;

  @NonNull
  public final LinearLayout layoutNotifications;

  @NonNull
  public final LinearLayout layoutPrivacy;

  private FragmentProfileBinding(@NonNull ScrollView rootView,
      @NonNull MaterialButton btnBackupData, @NonNull MaterialButton btnEditProfile,
      @NonNull MaterialButton btnLogout, @NonNull LinearLayout layoutAbout,
      @NonNull LinearLayout layoutExport, @NonNull LinearLayout layoutNotifications,
      @NonNull LinearLayout layoutPrivacy) {
    this.rootView = rootView;
    this.btnBackupData = btnBackupData;
    this.btnEditProfile = btnEditProfile;
    this.btnLogout = btnLogout;
    this.layoutAbout = layoutAbout;
    this.layoutExport = layoutExport;
    this.layoutNotifications = layoutNotifications;
    this.layoutPrivacy = layoutPrivacy;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentProfileBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentProfileBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_profile, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentProfileBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_backup_data;
      MaterialButton btnBackupData = ViewBindings.findChildViewById(rootView, id);
      if (btnBackupData == null) {
        break missingId;
      }

      id = R.id.btn_edit_profile;
      MaterialButton btnEditProfile = ViewBindings.findChildViewById(rootView, id);
      if (btnEditProfile == null) {
        break missingId;
      }

      id = R.id.btn_logout;
      MaterialButton btnLogout = ViewBindings.findChildViewById(rootView, id);
      if (btnLogout == null) {
        break missingId;
      }

      id = R.id.layout_about;
      LinearLayout layoutAbout = ViewBindings.findChildViewById(rootView, id);
      if (layoutAbout == null) {
        break missingId;
      }

      id = R.id.layout_export;
      LinearLayout layoutExport = ViewBindings.findChildViewById(rootView, id);
      if (layoutExport == null) {
        break missingId;
      }

      id = R.id.layout_notifications;
      LinearLayout layoutNotifications = ViewBindings.findChildViewById(rootView, id);
      if (layoutNotifications == null) {
        break missingId;
      }

      id = R.id.layout_privacy;
      LinearLayout layoutPrivacy = ViewBindings.findChildViewById(rootView, id);
      if (layoutPrivacy == null) {
        break missingId;
      }

      return new FragmentProfileBinding((ScrollView) rootView, btnBackupData, btnEditProfile,
          btnLogout, layoutAbout, layoutExport, layoutNotifications, layoutPrivacy);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
